#!/bin/bash
# This file is released under terms of BSD license
# See LICENSE file for more information
#
# clawfc
# Compiler driver for the claw language translation for Fortran language.
# This driver is based on the xmpf90 compiler driver from the OMNI Compiler
# project.
# https://github.com/omni-compiler/omni-compiler/blob/master/Driver/bin/
#   xmpf90.in
#
# author: clementval
#

## TODO cp original file in case of error

### Read configration file and library ###
claw_x2t_driver_conf_dir=@CLAW_X2T_CONFIG_PATH@
claw_x2t_driver_lib_dir=@CLAW_X2T_DRIVER_LIB_DIR@
compiler_macro="@COMPILER_MACRO@"
# shellcheck source=../etc/claw_f.conf.in
. ${claw_x2t_driver_conf_dir}/@CLAW_CONF_FILE@
# shellcheck source=../libexec/claw_f_lib.sh.in
. ${claw_x2t_driver_lib_dir}/@CLAW_LIB_SH@

### Directory for saving intermediate files ###
temp_dir=$(mktemp -d)
debug_temp_dir="${PWD}/__omni_tmp__"

### Default options ###
fpp_redirect=@FPP_REDIRECT@
only_pp=false
enable_cpp=true
verbose=false
enable_debug=false
enable_debug_omni=false
resolve_dependencies=true
stop_pp=false
stop_frontend=false
stop_translator=false
stop_dependencies=false
force_translation=false
list_target=false
list_directive=false
show_config=false
user_target=false
user_config=false
model_config=false
user_directive=false
line_directive=false
decompiler_max_column=false
dump_cx2t_args=false
force_pure=false
report=false
pipe_workflow=true
keep_comment=false
add_paren=false
omni_ffront_debug=false

### Set options ###
# e.g.) clawfc -I/usr/lib myfile.f90
#
#  output_file="a.out"           # Output file
#  f_files="a.f b.F c.f90 d.F90" # All fortran files
#  other_args="-I/usr/lib"       # Options for Preprocessor, Compiler, and
#                                # Linker
#
# To deal with space-separator in options, the following variables are defined
# as an array
#

output_file=""
output_dir=""
f_files=()
f_files_transformation=()
other_args=()

# Additional options defined by command line (e.g. --Wl..)
pp_add_opt=()
frontend_add_opt=()
xcode_translator_add_opt=()
module_opt=()
trans_module_opt=()
include_opt=()
override_config_opt=()

# CLAW special options
target_opt=""
config_opt=""
model_config_opt=""
directive_opt=""
max_columns=""

claw::set_parameters "${@+"$@"}"

# Set parameter variables as readonly after the set_parameters fct
readonly fpp_redirect
readonly only_pp
readonly enable_cpp
readonly verbose
readonly enable_debug
readonly enable_debug_omni
readonly resolve_dependencies
readonly stop_pp
readonly stop_frontend
readonly stop_translator
readonly stop_dependencies
readonly force_translation
readonly list_target
readonly list_directive
readonly show_config
readonly user_target
readonly user_config
readonly model_config
readonly user_directive
readonly line_directive
readonly decompiler_max_column
readonly dump_cx2t_args
readonly force_pure
readonly report
readonly pipe_workflow
readonly keep_comment
readonly add_paren
readonly omni_ffront_debug

### sed constant ###
readonly claw_sed_ignore="s/\\!\$claw ignore//"
readonly claw_sed_end_ignore="s/\\!\$claw end ignore//"
readonly claw_sed_cont="s/__CLAWAMP__/\\&/"
readonly claw_sed_verbatim="s/\\!\$claw verbatim //"

readonly claw_debug_prefix="claw-driver-debug"
readonly claw_debug_lvl_dep="CLAW_DEBUG_DEP"

### Add additional parameters needed for cx2t ###
claw::format_cx2t_params

### List target ###
if [[ ${list_target} == true ]]; then
  # shellcheck disable=SC2086
  ${OMNI_FX2X_CMD} ${OMNI_FX2X_OPT} --target-list
  exit 0
fi

### List directive ###
if [[ ${list_directive} == true ]]; then
  # shellcheck disable=SC2086
  ${OMNI_FX2X_CMD} ${OMNI_FX2X_OPT} --directive-list
  exit 0
fi

### Show config ###
if [[ ${show_config} == true ]]; then
  # shellcheck disable=SC2086
  ${OMNI_FX2X_CMD} ${OMNI_FX2X_OPT} --show-config ${CLAW_X2T_CONFIG_OPT}
  exit 0
fi

### Add front-end debug option
if [[ ${omni_ffront_debug} == true ]]; then
  OMNI_F2X_OPT="${OMNI_F2X_OPT} -d"
fi

### Add front-end option to keep the comment
if [[ ${keep_comment} == true ]]; then
  OMNI_F2X_OPT="${OMNI_F2X_OPT} -fleave-comment"
fi

readonly OMNI_F2X_OPT

# Add debug flag for the translator options
if [[ ${enable_debug} == true ]]; then
  CLAW_X2T_TRANSLATOR_OPT="${CLAW_X2T_TRANSLATOR_OPT} -d"
fi

## Check that input file exits
claw::check_file_exist

## Check if multiple file, output_dir must be specified and output_file not
if [ ${#f_files[@]} -gt 1 ] && [ "${output_dir}" == "" ]; then
  # Error: multiple files without output directory specified
  claw::error_exit "internal" "-" "-" "output directory not specified"
elif [ "${output_file}" != "" ] && [ "${output_dir}" != "" ]; then
  # Error: output file and output directory defined at the same time
  claw::error_exit "internal" "-" "-" \
    "output directory and output file cannot be specified together"
fi

## No output file specifed so define a default one
if [ "${output_file}" != "" ] && [ "${output_dir}" != "" ]; then
  output_file="a.f90"
fi

### Create temporal directory ###
[[ ${enable_debug_omni} == true ]] && temp_dir=${debug_temp_dir}
mkdir -p "${temp_dir}"
claw::verbose "Create ${temp_dir}/"

### Bypass file without code transformation ###
for input_file in "${f_files[@]}"; do
  if ! [[ ${force_translation} == true ]]; then
    num_directives="$(grep --count --ignore-case "!\$claw" "${input_file}")"
    num_omp_compile_guard="$(grep --count --ignore-case "!\$omp claw-guard" "${input_file}")"
    num_acc_compile_guard="$(grep --count --ignore-case "!\$acc claw-guard" "${input_file}")"
    if [[ "${num_directives}" == "0" ]] &&
      [[ "${num_omp_compile_guard}" == "0" ]] &&
      [[ "${num_acc_compile_guard}" == "0" ]]; then
      claw::warning "${input_file}" "-" "-" "file does not contains \$claw. Skip..."
      if [[ "${output_dir}" != "" ]]; then
        cp "${input_file}" "${output_dir}"/"${input_file}"
      else
        cp "${input_file}" "${output_file}"
      fi
    else
      f_files_transformation+=("${input_file}")
    fi
  else
    f_files_transformation+=("${input_file}")
  fi
done

### TODO check if f_files_transformation has any files in ...

### Preprocessor ###
[[ ${only_pp} == true ]] && [[ -f "${output_file}" ]] && rm "${output_file}"
[[ ${enable_cpp} == true ]] && OMNI_FPP_OPT="${OMNI_FPP_OPT} ${CPP_OPT}"
for input_file in "${f_files_transformation[@]}"; do
  claw::verbose "Prepocessing file ${input_file}"

  ext=${input_file##*.}
  file_pp="$(claw::get_pp_filename "${input_file}")"   # preprocessed file with original name
  file_pp1="$(claw::get_pp1_filename "${input_file}")" # temp file for preprocessing 1
  file_pp2="$(claw::get_pp2_filename "${input_file}")" # temp file for preprocessing 2
  preprocessor_output="$(basename "${file_pp%.*}")"

  if [[ "${ext}" == "F90" ]] || [[ "${ext}" == "F" ]] ||
    [[ ${enable_cpp} == true ]]; then

    # Apply pre preprocessor pass to avoid ending backslash error
    claw::applyPreprocessorPass "${input_file}" "${file_pp1}"
    mv "${file_pp1}" "${file_pp}"

    if [[ ${fpp_redirect} == true ]]; then
      # Debug output
      [[ ${enable_debug_omni} == true ]] && echo "CLAW DRIVER: Preprocessing (redirect)"
      [[ ${enable_debug_omni} == true ]] && echo "${OMNI_FPP_CMD} ${include_opt[*]} \
        ${pp_add_opt[*]} ${OMNI_FPP_OPT} ${other_args[*]} ${file_pp} > \
        ${file_pp2}"

      # Call to the preprocessor
      # shellcheck disable=SC2086,SC2068
      ${OMNI_FPP_CMD} ${include_opt[@]} ${pp_add_opt[@]} \
        ${OMNI_FPP_OPT} ${other_args[@]} "${file_pp}" > ${file_pp2}

      mv "${file_pp2}" "${file_pp}"
    else
      # Debug output
      [[ ${enable_debug_omni} == true ]] && echo "CLAW DRIVER: Preprocessing"
      [[ ${enable_debug_omni} == true ]] && echo "${OMNI_FPP_CMD} ${include_opt[*]} \
        ${pp_add_opt[*]} ${OMNI_FPP_OPT} ${other_args[*]} ${file_pp}"
      [[ ${enable_debug_omni} == true ]] && echo "mv ${preprocessor_output}.i \
        ${file_pp}"

      # Call to the preprocessor
      # shellcheck disable=SC2086,SC2068
      ${OMNI_FPP_CMD} ${include_opt[@]} ${pp_add_opt[@]} \
        ${OMNI_FPP_OPT} ${other_args[@]} "${file_pp}"

      mv "${preprocessor_output}.i" "${file_pp}"
    fi

    if [[ ${only_pp} == true ]]; then
      if [[ "${output_file}" == "" ]]; then
        cat "${file_pp}"
      else
        cat "${file_pp}" >>"${output_file}" # TODO debug here
      fi
    fi
  fi
done
[[ ${stop_pp} == true ]] && exit 0
[[ ${only_pp} == true ]] && [[ ${enable_debug_omni} == true ]] && exit 0
[[ ${only_pp} == true ]] && {
  rm -rf "${temp_dir}"
  exit 0
}

### Apply ignore directive
for input_file in "${f_files_transformation[@]}"; do
  claw::verbose "Apply !\$claw ignore to file ${input_file}"
  ext=${input_file##*.}
  if [[ "${ext}" == "F90" ]] || [[ "${ext}" == "F" ]] ||
    [[ ${enable_cpp} == true ]]; then
    file_pp="$(claw::get_pp_filename "${input_file}")"
  else
    file_pp="$(claw::get_pp_filename "${input_file}")"
  fi
  claw::applyIgnore "${file_pp}"
done

### dependencies resolution ###
if [[ ${resolve_dependencies} == true ]]; then
  for input_file in "${f_files_transformation[@]}"; do
    claw::verbose "Dependencies resolution for file ${input_file}"
    ext=${input_file##*.}
    if [[ "${ext}" == "F90" ]] || [[ "${ext}" == "F" ]] ||
      [[ ${enable_cpp} == true ]]; then
      file_pp="$(claw::get_pp_filename "${input_file}")"
    else
      file_pp="$(claw::get_pp_filename "${input_file}")"
    fi

    claw::process_dependencies "${file_pp}" "${input_file}"
  done
  [[ ${stop_dependencies} == true ]] && claw::exit_without_error
fi

### Pipe workflow ###
if [[ ${pipe_workflow} == true ]]; then
  for input_file in "${f_files_transformation[@]}"; do
    file_out_f=""
    if [[ "${output_file}" != "" ]]; then
      file_out_f=${output_file}
    elif [[ "${output_dir}" != "" ]]; then
      file_out_f=${output_dir}/${input_file}
    fi

      #TODO integrate when full workflow: if [[ ${fpp_redirect} == true ]]; then
      ext=${input_file##*.}
      if [[ "${ext}" == "F90" ]] || [[ "${ext}" == "F" ]] ||
        [[ ${enable_cpp} == true ]]; then
        file_pp="$(claw::get_pp_filename "${input_file}")"
      else
        file_pp="$(claw::get_pp_filename "${input_file}")"
      fi

      basefile_name="$(claw::get_basefile "${input_file}")"
      base_pp="$(basename "${file_pp}")"
      sed -i.bak "s/${base_pp}/${basefile_name}/g" "${file_pp}"

      if [[ "${file_out_f}" != "" ]]; then
        # shellcheck disable=SC2086,SC2068
        ${OMNI_F2X_CMD} "${include_opt[@]}" "${module_opt[@]}" \
          "${frontend_add_opt[@]}" ${OMNI_F2X_OPT} "${file_pp}" |
          ${OMNI_FX2X_CMD} ${OMNI_FX2X_OPT} ${CLAW_X2T_TRANSLATOR_OPT} \
            ${CLAW_X2T_TARGET_OPT} ${CLAW_X2T_DIRECTIVE_OPT} \
            ${CLAW_X2T_CONFIG_OPT} ${CLAW_X2T_MODEL_CONFIG_OPT} \
            ${CLAW_X2T_MAX_COLUMN_OPT} ${CLAW_X2T_LINE_OPT} \
            "${xcode_translator_add_opt[@]}" "${module_opt[@]}" \
            "${trans_module_opt[@]}" "${override_config_opt[@]}" |
          sed -e "${claw_sed_ignore}" | sed -e "${claw_sed_end_ignore}" |
          sed -e "${claw_sed_cont}" | sed -e "${claw_sed_verbatim}" > "${file_out_f}"
      else
        # shellcheck disable=SC2086,SC2068
        ${OMNI_F2X_CMD} "${include_opt[@]}" "${module_opt[@]}" \
          "${frontend_add_opt[@]}" ${OMNI_F2X_OPT} "${file_pp}" |
          ${OMNI_FX2X_CMD} ${OMNI_FX2X_OPT} ${CLAW_X2T_TRANSLATOR_OPT} \
            ${CLAW_X2T_TARGET_OPT} ${CLAW_X2T_DIRECTIVE_OPT} \
            ${CLAW_X2T_CONFIG_OPT} ${CLAW_X2T_MODEL_CONFIG_OPT} \
            ${CLAW_X2T_MAX_COLUMN_OPT} ${CLAW_X2T_LINE_OPT} \
            "${xcode_translator_add_opt[@]}" "${module_opt[@]}" \
            "${trans_module_opt[@]}" "${override_config_opt[@]}" |
          sed -e "${claw_sed_ignore}" | sed -e "${claw_sed_end_ignore}" |
          sed -e "${claw_sed_cont}" | sed -e "${claw_sed_verbatim}"
      fi
      # 0: OMNI FORTRAN Front-end
      # 1: CLAW XcodeML Translator
      # 2: !$claw ignore     # revert pass
      # 3: !$claw end ignore # revert pass
      # 4: __CLAWAMP__       # convertion pass
      # 5: !$claw verbatim   # revert pass
      # shellcheck disable=SC2206
      compiler_status=(${PIPESTATUS[*]})

      if [[ ${compiler_status[0]} -ne 0 ]] ||
        [[ ${compiler_status[1]} -ne 0 ]] ||
        [[ ${compiler_status[2]} -ne 0 ]] ||
        [[ ${compiler_status[3]} -ne 0 ]] ||
        [[ ${compiler_status[4]} -ne 0 ]] ||
        [[ ${compiler_status[5]} -ne 0 ]]; then
        claw::error_exit "${input_file}" "-" "-" "Internal error."
      fi
    #TODO integrate when full workflow: else
    #TODO integrate when full workflow:  claw::error_exit "FPP breaks pipe mode"
    #TODO integrate when full workflow: fi
  done
  claw::exit_without_error
fi

### Frontend ###
for input_file in "${f_files_transformation[@]}"; do
  claw::verbose "Fortran to XcodeML ..."
  ext=${input_file##*.}
  if [[ "${ext}" == "F90" ]] || [[ "${ext}" == "F" ]] ||
    [[ ${enable_cpp} == true ]]; then
    file_pp="$(claw::get_pp_filename "${input_file}")"
  else
    file_pp="$(claw::get_pp_filename "${input_file}")"
  fi
  file_in_x="$(claw::get_in_xcodeml_filename "${input_file}")"

  # Check that input file produced by preprocessing pass exists.
  if [[ ! -f ${file_pp} ]]; then
    claw::error_exit "${input_file}" "-" "-" \
      "Input file not preprocessed correctly. Parsing cannot be done."
  fi

  basefile_name="$(claw::get_basefile "${input_file}")"
  base_pp="$(basename "${file_pp}")"
  sed -i.bak "s/${base_pp}/${basefile_name}/g" "${file_pp}"

  # Debug output
  [[ ${enable_debug_omni} == true ]] && echo "CLAW DRIVER: Front-end"

  # shellcheck disable=SC2153,SC2086
  [[ ${enable_debug_omni} == true ]] && echo "${OMNI_F2X_CMD} \
    ${include_opt[*]} ${module_opt[*]} ${frontend_add_opt[*]} ${OMNI_F2X_OPT} \
    ${file_pp} -o  ${file_in_x}"

  # Call F_Front with the correct arguments
  # shellcheck disable=SC2153,SC2086
  ${OMNI_F2X_CMD} "${include_opt[@]}" "${module_opt[@]}" \
    "${frontend_add_opt[@]}" ${OMNI_F2X_OPT} "${file_pp}" \
    -o "${file_in_x}"
done
[[ ${stop_frontend} == true ]] && claw::exit_without_error

### Translator ###
for input_file in "${f_files_transformation[@]}"; do
  claw::verbose "XcodeML to XcodeML translation ..."

  ext=${input_file##*.}
  file_in_x="$(claw::get_in_xcodeml_filename "${input_file}")"

  # Check that input file produced by parsing pass exists.
  if [[ ! -f ${file_in_x} ]]; then
    claw::error_exit "${input_file}" "-" "-" \
      "Input file not parsed correctly. Translation cannot be done."
  fi

  file_out_x="$(claw::get_out_xcodeml_filename "${input_file}")"
  file_out_f=${temp_dir}/"${input_file}"
  if [[ "${output_file}" != "" ]]; then
    file_out_f=${output_file}
  elif [[ "${output_dir}" != "" ]]; then
    file_out_f=${output_dir}/${input_file}
  fi

  # Define report file output
  if [ ${report} == true ]; then
    file_out_r="${file_out_f%.*}"
    file_out_r="${file_out_r}.lst"
    CLAW_X2T_TRANSLATOR_OPT="${CLAW_X2T_TRANSLATOR_OPT} --report=${file_out_r}"
  fi

  # Dump the arguments pass to the translator for easier debugging
  if [[ ${dump_cx2t_args} == true ]]; then
    echo "=============================="
    echo "-- [DEBUG] Arguments for cx2t:"
    echo "=============================="
    echo ""
    echo "${CLAW_X2T_TRANSLATOR_OPT} ${CLAW_X2T_TARGET_OPT} \
      ${CLAW_X2T_DIRECTIVE_OPT} ${CLAW_X2T_CONFIG_OPT} \
      ${CLAW_X2T_MODEL_CONFIG_OPT} \
      ${CLAW_X2T_MAX_COLUMN_OPT} ${CLAW_X2T_LINE_OPT} \
      ${xcode_translator_add_opt[*]} ${module_opt[*]} ${trans_module_opt[*]} \
      -o ${file_out_x} -f ${file_out_f} ${file_in_x}"
    echo ""
    echo "=============================="
  fi

  # Debug output
  [[ ${enable_debug_omni} == true ]] && echo "CLAW DRIVER: Translation + backend"
  [[ ${enable_debug_omni} == true ]] && echo "${OMNI_FX2X_CMD} \
    ${OMNI_FX2X_OPT} ${CLAW_X2T_TRANSLATOR_OPT} ${CLAW_X2T_TARGET_OPT}
    ${CLAW_X2T_DIRECTIVE_OPT} ${CLAW_X2T_CONFIG_OPT} \
    ${CLAW_X2T_MODEL_CONFIG_OPT} \
    ${CLAW_X2T_MAX_COLUMN_OPT} ${CLAW_X2T_LINE_OPT} \
    ${xcode_translator_add_opt[*]} ${module_opt[*]} ${trans_module_opt[*]} -o \
    ${file_out_x} -f ${file_out_f} ${file_in_x}"

  # Call to the translator
  # shellcheck disable=SC2086
  ${OMNI_FX2X_CMD} ${OMNI_FX2X_OPT} ${CLAW_X2T_TRANSLATOR_OPT} \
    ${CLAW_X2T_TARGET_OPT} ${CLAW_X2T_DIRECTIVE_OPT} ${CLAW_X2T_CONFIG_OPT} \
    ${CLAW_X2T_MODEL_CONFIG_OPT} \
    ${CLAW_X2T_MAX_COLUMN_OPT} ${CLAW_X2T_LINE_OPT} \
    "${xcode_translator_add_opt[@]}" "${module_opt[@]}" \
    "${trans_module_opt[@]}" "${override_config_opt[@]}"  -o "${file_out_x}" \
    -f "${file_out_f}" "${file_in_x}"

  # Check that translation output a file
  if [[ ! -f ${file_out_x} ]]; then
    claw::error_exit "${input_file}" "-" "-" "Translation failed."
  fi

  # Check that decompiler output a file
  if [[ ! -f ${file_out_f} ]]; then
    claw::error_exit "${input_file}" "-" "-" "Decompiler failed."
  fi

  # also create ${temp_dir}/${file_name}_${ext}_in.F90
  # Note : The BlueGene/Q 's mpi compiler can compile only *.F90 in XMP process.
  # So that remains .F90 extention after process of the native compilier.
done
[[ ${stop_translator} == true ]] && claw::exit_without_error

### Revert ignore prefix and apply verbatim
for input_file in "${f_files_transformation[@]}"; do
  if [[ "${output_file}" != "" ]]; then
    file_out_f=${output_file}
  elif [[ "${output_dir}" != "" ]]; then
    file_out_f=${output_dir}/${input_file}
  fi
  claw::revertIgnore "${file_out_f}"
  claw::applyVerbatim "${file_out_f}"
done

claw::exit_without_error
